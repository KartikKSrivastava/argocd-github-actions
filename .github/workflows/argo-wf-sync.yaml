name: argo-wf-sync
on:
  push:
    branches: [ "dev" ] 
    paths:
      - dev-argo-workflow/**
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
  login:
    runs-on: ubuntu-latest
    steps:    
    - name: Login to ArgoWF Dev
      run: |
        curl -sLO https://github.com/argoproj/argo-workflows/releases/download/v3.1.3/argo-linux-amd64.gz
        gunzip argo-linux-amd64.gz
        chmod +x argo-linux-amd64
        mv ./argo-linux-amd64 /usr/local/bin/argo
        argo version
        echo "Login to ArgoWF-Dev Successful!"
  linting:
    needs: [ build, login ]
    runs-on: ubuntu-latest
    steps:
    - name: Check YAML Linting
      run:
        echo "Linting Successful!"
  file-changed:  
    needs: [ build, login, linting ]
    runs-on: ubuntu-latest
    steps:
#     - name: changed files
#       id: files
#       uses: jitterbit/get-changed-files@v1
#     - run: |
#          for changed_file in ${{ steps.files.outputs.all }}; do
#          echo "Do something with this ${changed_file}."
#          done    
    - name: changed files
      id: files
      uses: jitterbit/get-changed-files@v1
      with:
        format: 'json'
    - run: |
         readarray -t added_modified_files <<<"$(jq -r '.[]' <<<'${{ steps.files.outputs.added_modified }}')"
         for added_modified_files in ${added_modified_files[@]}; do
         echo "Running my ArgoWF commands for added/modified file ->"
         filename=$(echo ${added_modified_files} | sed 's:.*/::')
         echo $filename
         argo lint $filename
         done
         
         readarray -t removed_files <<<"$(jq -r '.[]' <<<'${{ steps.files.outputs.removed }}')"
         for removed_file in ${removed_files[@]}; do
         echo "Running my ArgoWF commands for removed file -> ${removed_file}."
         done
  workflow-check:
    needs: [ build, login, linting, file-changed ] 
    runs-on: ubuntu-latest
    steps:
    - name: Argo Workflow Checking
      run: |
        echo Check 1 Passed,
        echo Check 2 Passed
